/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and their quiz results.
 * All data is nested under the /users/{userId} path, ensuring only the authenticated user can access their own data.
 * Listing of all users is explicitly denied to protect user privacy. Public read access is granted for quizzes, questions, badges and posts, but only the post's author can edit it.
 * Denormalization is used to include the owner ID directly on the StudySession document.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Quiz results are strictly owned by the user.
 * - Public read access is granted to Quizzes, Questions, Badges, and Posts.
 * - StudySession creation and management are restricted to the session owner and participants.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows the user to create their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their profile.
     * @deny (create) User with ID not matching auth.uid cannot create a profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to manage their quiz results.
     * @path /users/{userId}/quizResults/{quizResultId}
     * @allow (create) User with ID matching the path can create quiz results.
     * @deny (create) User with ID not matching the path cannot create quiz results.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quizResults/{quizResultId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read quizzes. Only admin can edit.
     * @path /quizzes/{quizId}
     * @allow (get, list) Any user can read quizzes.
     * @deny (create, update, delete) Only admin can manage quizzes.
     * @principle Allows public read with restricted writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read questions. Only admin can edit.
     * @path /questions/{questionId}
     * @allow (get, list) Any user can read questions.
     * @deny (create, update, delete) Only admin can manage questions.
     * @principle Allows public read with restricted writes.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read badges. Only admin can edit.
     * @path /badges/{badgeId}
     * @allow (get, list) Any user can read badges.
     * @deny (create, update, delete) Only admin can manage badges.
     * @principle Allows public read with restricted writes.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows participants of the study session to perform actions.
     * @path /studySessions/{studySessionId}
     * @allow (read) Any participant can read.
     * @allow (create, update, delete) Owner can manage the study session.
     * @principle Enforces document ownership and shared access.
     */
    match /studySessions/{studySessionId} {
      allow get: if resource.data.participants.hasAny([request.auth.uid]);
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId) && resource.data.ownerId == request.auth.uid;
      allow delete: if isExistingOwner(resource.data.ownerId) && resource.data.ownerId == request.auth.uid;
    }

    /**
     * @description Allows anyone to read posts. The author can edit.
     * @path /posts/{postId}
     * @allow (get, list) Any user can read posts.
     * @allow (create) Any signed-in user can create a post. The post must contain the userId that matches the signed in user.
     * @deny (update, delete) Only the post author can modify it.
     * @principle Allows public read with owner-only writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows anyone to read comments. Only the author can edit.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list) Any user can read comments.
     * @allow (create) Any signed-in user can create a comment. The comment must contain the userId that matches the signed in user.
     * @deny (update, delete) Only the comment author can modify it.
     * @principle Allows public read with owner-only writes.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

        /**
         * @description Allows authenticated users to create, update and delete friend requests, based on sender/receiver relationship
         * @path /friendRequests/{requestId}
         * @allow (create) Authenticated users can create friend requests, but must specify toUserId and fromUserId.
         * @allow (update) Authenticated users can update friend requests only if they are the sender OR the recipient.
         * @allow (delete) Authenticated users can delete friend requests only if they are the sender OR the recipient.
         * @principle Enforces ownership for creating and modifying friend requests.
         */
        match /friendRequests/{requestId} {
            allow get: if false;
            allow list: if false; // Friend requests should be private

            allow create: if isSignedIn()
                          && request.resource.data.fromUserId == request.auth.uid; // Only the sender can create

            allow update: if isSignedIn()
                          && (resource.data.toUserId == request.auth.uid
                              || resource.data.fromUserId == request.auth.uid); // Only sender/receiver can update

            allow delete: if isSignedIn()
                          && (resource.data.toUserId == request.auth.uid
                              || resource.data.fromUserId == request.auth.uid)
                          && resource != null; // Only sender/receiver can delete
        }

        /**
         * @description Allows a user to like a post.
         * @path /posts/{postId}/likes/{likeId}
         */
        match /posts/{postId}/likes/{likeId} {
            allow get: if false;
            allow list: if false;
            allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
            allow update, delete: if false;
        }
  }
}