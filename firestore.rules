/**
 * @fileOverview Firestore Security Rules for EduSpark, an educational application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and authenticated access. Users can only read/write their own data under their user ID,
 * and authenticated users can access community content. Data validation is minimized for prototyping speed.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. User-owned.
 * - /users/{userId}/quizResults/{quizResultId}: Stores quiz results. User-owned.
 * - /quizzes/{quizId}: Stores quiz definitions. Publicly readable.
 * - /questions/{questionId}: Stores individual question details. Publicly readable.
 * - /badges/{badgeId}: Stores badge information. Publicly readable.
 * - /studySessions/{studySessionId}: Stores study session details.
 * - /posts/{postId}: Stores community posts. Publicly readable, owner-writeable.
 * - /posts/{postId}/comments/{commentId}: Stores comments on posts.
 *
 * Key Security Decisions:
 * - Users can only read all users and write their own user document
 * - Public read access for quizzes, questions, and badges.
 * - Study sessions are accessible to participants.
 * - Posts are publicly readable but writable only by the owner.
 *
 * Denormalization for Authorization:
 *  - The `StudySession` entity stores an array of `participants`, allowing the rules to directly check if the requesting user is part of the session.
 *  - The `Post` entity requires a `userId` field to associate the post with its author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource's owner ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Allows authenticated users to read all users for friend search and community feed,
     *              and allows users to write their own user document.
     * @path /users/{userId}
     * @allow (list) if isSignedIn() - Allows any authenticated user to list all user documents for community purposes.
     * @allow (get) if isSignedIn() - Allows any authenticated user to get all user documents for community purposes.
     * @allow (create) if isOwner(userId) - Allows a user to create their own user document.
     * @allow (update) if isExistingOwner(userId) - Allows a user to update their own user document.
     * @allow (delete) if false - Denies deletion of user documents.
     * @deny (create) if !isOwner(userId) - Denies creating a user document with a different user ID.
     * @deny (update) if !isExistingOwner(userId) - Denies updating a user document with a different user ID.
     * @principle Enforces user-owned data with authenticated read access for community features.
     */
    match /users/{userId} {
        allow get, list: if isSignedIn();
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if false;
    }

    /**
     * @description Stores quiz results for each user.
     * @path /users/{userId}/quizResults/{quizResultId}
     * @allow (create) if isOwner(userId) - Allows a user to create a quiz result under their ID.
     * @allow (get) if isOwner(userId) - Allows a user to retrieve their own quiz results.
     * @allow (list) if isOwner(userId) - Allows a user to list their own quiz results.
     * @allow (update) if isExistingOwner(userId) - Allows a user to update their own quiz results.
     * @allow (delete) if isExistingOwner(userId) - Allows a user to delete their own quiz results.
     * @deny (create) if !isOwner(userId) - Denies creating quiz results under another user's ID.
     * @deny (update) if !isExistingOwner(userId) - Denies updating quiz results by a non-owner.
     * @deny (delete) if !isExistingOwner(userId) - Denies deleting quiz results by a non-owner.
     * @principle Enforces user-owned data for quiz results.
     */
    match /users/{userId}/quizResults/{quizResultId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores quiz definitions, accessible to everyone.
     * @path /quizzes/{quizId}
     * @allow (get, list) if true - Allows anyone to view quizzes.
     * @allow (create, update, delete) if false - Prevents anyone from creating, updating, or deleting quizzes.
     * @principle Public read, no write access.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores individual question details, accessible to everyone.
     * @path /questions/{questionId}
     * @allow (get, list) if true - Allows anyone to view questions.
     * @allow (create, update, delete) if false - Prevents anyone from creating, updating, or deleting questions.
     * @principle Public read, no write access.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores badge information, accessible to everyone.
     * @path /badges/{badgeId}
     * @allow (get, list) if true - Allows anyone to view badges.
     * @allow (create, update, delete) if false - Prevents anyone from creating, updating, or deleting badges.
     * @principle Public read, no write access.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Stores study session details, accessible only to participants.
     * @path /studySessions/{studySessionId}
     * @allow (get) if isSignedIn() && request.auth.uid in resource.data.participants - Allows participants to get study session details.
     * @allow (list) if isSignedIn() - Allows any authenticated user to list study sessions.
     * @allow (create) if isSignedIn() - Allows any authenticated user to create study sessions.
     * @allow (update) if isSignedIn() && request.auth.uid in resource.data.participants - Allows participants to update study session details.
     * @allow (delete) if isExistingOwner(resource.data.ownerId) - Allows the owner to delete the study session.
     * @deny (get) if !(isSignedIn() && request.auth.uid in resource.data.participants) - Denies non-participants from getting study session details.
     * @deny (update) if !(isSignedIn() && request.auth.uid in resource.data.participants) - Denies non-participants from updating study session details.
     * @principle Enforces shared access for study sessions based on the participants list.
     */
    match /studySessions/{studySessionId} {
      allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Stores community posts, publicly readable but writable only by the owner.
     * @path /posts/{postId}
     * @allow (get, list) if true - Allows anyone to read posts.
     * @allow (create) if isSignedIn() && request.resource.data.userId == request.auth.uid - Allows creating a post if the user ID matches the authenticated user.
     * @allow (update) if isExistingOwner(resource.data.userId) - Allows updating a post if the user is the owner.
     * @allow (delete) if isExistingOwner(resource.data.userId) - Allows deleting a post if the user is the owner.
     * @deny (create) if !(isSignedIn() && request.resource.data.userId == request.auth.uid) - Denies creating a post if the user ID does not match the authenticated user.
     * @deny (update) if !isExistingOwner(resource.data.userId) - Denies updating a post if the user is not the owner.
     * @deny (delete) if !isExistingOwner(resource.data.userId) - Denies deleting a post if the user is not the owner.
     * @principle Public read, owner-only write access for posts.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Stores comments on posts, accessible to everyone.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list) if true - Allows anyone to view comments.
     * @allow (create) if isSignedIn() - Allows any authenticated user to create a comment.
     * @allow (update) if isExistingOwner(resource.data.userId) - Allows the comment owner to update their comment.
     * @allow (delete) if isExistingOwner(resource.data.userId) - Allows the comment owner to delete their comment.
     */
    match /posts/{postId}/comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isExistingOwner(resource.data.userId);
        allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Subcollection to track likes on a specific post.
     * @path /posts/{postId}/likes/{likeId}
     */
    match /posts/{postId}/likes/{likeId} {
        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if isExistingOwner(resource.data.userId);
    }

     /**
      * @description Collection to manage friend requests between users.
      * @path /friendRequests/{requestId}
      */
    match /friendRequests/{requestId} {
        allow get: if isSignedIn() && (resource.data.toUserId == request.auth.uid || resource.data.fromUserId == request.auth.uid);
        allow list: if isSignedIn() && (resource.data.toUserId == request.auth.uid || resource.data.fromUserId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.fromUserId == request.auth.uid;
        allow update: if isSignedIn() && (resource.data.toUserId == request.auth.uid || resource.data.fromUserId == request.auth.uid);
        allow delete: if isSignedIn() && request.resource.data.fromUserId == request.auth.uid;
    }
  }
}